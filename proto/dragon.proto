// recommend all int32/64 repeated item add [packed=true]
// pursue smaller space

message Datum{
    optional int32 channels=1;
    optional int32 height=2;
    optional int32 width=3;
    optional int32 label=4;
    optional bytes data=5;
    repeated float float_data=6 [packed=true];
    optional bool encoded=7 [default=false];
}

message SolverParameter{
    optional string net_file=24;
    optional NetParameter net_param=25;
    optional string train_net_file=1;
    //  cross vaildation/test
    repeated string test_net_file=2;
    optional NetParameter train_net_param=21;
    repeated NetParameter test_net_param=22;
    optional NetState train_state=26;
    repeated NetState test_state=27;
    repeated int32 test_iter=3;
    optional int32 test_interval=4 [default=0];
    optional bool test_compute_loss=19 [default=false];
    optional bool test_before_train=32 [default=true];
    optional float base_lr=5;
    optional int32 display=6;
    optional int32 average_loss=33 [default=1];
    optional int32 max_iter=7;
    optional int32 iter_size=36 [default=1];
    optional string lr_policy=8;
    optional float gamma=9;
    optional float power=10;
    optional float momentum=11;
    optional float weight_decay=12;
    optional string regularizer=29 [default="L2"];
    optional int32 step_size=13;
    repeated int32 step_value=34;
    optional float clip_gradients=35 [default=-1];
    optional int32 snapshot_interval=14 [default=0];
    optional bool snapshot_after_train=28 [default=true];
    optional string snapshot_prefix=15;
    optional bool snapshot_diff=16;
    enum SnapShotFormat{HDF5=0;BINARY=1;}
    optional SnapShotFormat snapshot_format=37 [default=BINARY];
    enum SolverMode{CPU=0;GPU=1;}
    optional SolverMode solver_mode=17 [default=GPU];
    optional int32 device_id=18 [default=0];
    optional int64 random_seed=20 [default=-1];
    optional string type=40 [default="SGD"];
    //  eps
    optional float delta=31 [default=1e-10];
    //  Adam solver
    optional float momentum2=39 [default=0.999];
    optional float rms_decay=38;
    optional bool debug_info=23 [default=false];
    enum SolverType{
        SGD=0;NESTEROV=1;ADAGRAD=2;RMSPROP=3;ADADELTA=4;ADAM=5;
    }
    optional SolverType solver_type=30 [default=SGD];
}

message SolverState{
    optional int32 iter = 1; // The current iteration
    optional string learned_net = 2; // The file that stores the learned net.
    repeated BlobProto history = 3; // The history for sgd solvers
    optional int32 current_step = 4 [default = 0]; // The current step for learning rate
}

message FillerParameter{
    optional string type=1 [default='constant'];
    optional float value=2 [default=0];
    optional float min=3 [default=0];
    optional float max=4 [default=1];
    optional float mean=5 [default=0];
    optional float std=6 [default=1];
    optional int32 sparse=7 [default=-1];
    enum VarianceNorm{FAN_IN=0;FAN_OUT=1;AVG=2;}
    optional VarianceNorm variance_norm=8 [default=FAN_IN];
}

message NetState{
    optional Phase phase=1 [default=TEST];
    optional int32 level=2 [default=0];
    repeated string stage=3;
}

message NetStateRule{
    optional Phase phase=1;
    optional int32 min_level=2;
    optional int32 max_level=3;
    repeated string stage=4;
    repeated string not_stage=5;
}

message NetParameter{
    optional string name=1;
    repeated string input=2;
    repeated BlobShape input_shape=3;
    optional bool force_backward=4 [default=false];
    optional NetState state=5;
    optional bool debug_info=6 [default=false];
    repeated LayerParameter layer=7;
}

message BlobShape{
    repeated int64 dim=1 [packed=true];
}

message BlobProto{
    optional BlobShape shape=1;
    repeated float data=2;
    repeated float diff=3;
    repeated double double_data=4;
    repeated double double_diff=5;
}

enum Phase{
    TRAIN=0;
    TEST=1;
}

message ParamSpec{
    enum DimCheckMode {
    // STRICT (default) requires that num, channels, height, width each match.
    STRICT = 0;
    // PERMISSIVE requires only the count (num*channels*height*width) to match.
    PERMISSIVE = 1;
  }
    optional string name=1;
    optional DimCheckMode share_mode=2;
    optional float lr_mult=3 [default=1.0];
    optional float decay_mult=4 [default=1.0];
}


message DataParameter{
    enum DB{
        LEVELDB=0;
        LMDB=1;
    }
    optional string source=1;
    optional uint32 batch_size=2;
    optional DB backend=3 [default=LMDB];
    //4-way pre-buffering is enough for normal machines
    optional uint32 prefech=4 [default=4];
}

message TransformationParameter{
    optional float scale=1 [default=1.0];
    optional bool mirror=2 [default=false];
    optional uint32 crop_size=3 [default=0];
    optional string mean_file=4;
    repeated float mean_value=5;
    optional bool force_color=6 [default=false];
    optional bool force_gray=7 [default=false];
}

message LayerParameter{
    optional string name=1;
    optional string type=2;
    repeated string bottom=3;
    repeated string top=4;
    optional Phase phase=10;
    repeated float loss_weight=5;
    repeated ParamSpec param=6; //why repeat?
    repeated BlobProto blobs=7;
    optional DataParameter data_param=8;
    optional TransformationParameter transform_param=9;
    optional ReLUParameter relu_param=19;
    optional ConvolutionParameter convolution_param=11;
    optional PoolingParameter pooling_param=12;
    optional InnerProductParameter inner_product_param=13;
    optional LossParameter loss_param=14;
    optional AccuracyParameter accuracy_param=15;
    optional BatchNormParameter batch_norm_param=20;
    optional DropoutParameter dropout_param=21;
    optional LSTMParameter lstm_param=22;
    optional SoftmaxParameter softmax_param=16;
    repeated NetStateRule include=17;
    repeated NetStateRule exclude=18;
}

message ConvolutionParameter{
    optional uint32 num_output=1;
    optional bool bias_term=2 [default=true];
    repeated uint32 pad=3;
    repeated uint32 kernel=4;
    repeated uint32 stride=5;
    optional uint32 group=6 [default = 1];
    optional FillerParameter weight_filler=7;
    optional FillerParameter bias_filler=8;
    optional uint32 pad_h=9 [default=0];
    optional uint32 pad_w=10 [default=0];
    optional uint32 kernel_h=11;
    optional uint32 kernel_w=12;
    optional uint32 stride_h=13;
    optional uint32 stride_w=14;
    enum Engine{DEFAULT=0;DRAGON=1;CUDNN=2;}
    optional Engine engine=15 [default=DEFAULT];
    optional int32 axis=16 [default=1];
    optional bool force_nd_im2col=17 [default=false];
}

message PoolingParameter{
    enum Method{MAX=0;AVG=1;STOCHASTIC=2;}
    enum Engine{DEFAULT=0;DRAGON=1;CUDNN=2;}
    optional Method method=1 [default=MAX];
    optional uint32 pad=2 [default=0];
    optional uint32 kernel=3;
    optional uint32 stride=4 [default=1];
    optional uint32 pad_h=5 [default=0];
    optional uint32 pad_w=6 [default=0];
    optional uint32 kernel_h=7;
    optional uint32 kernel_w=8;
    optional uint32 stride_h=9;
    optional uint32 stride_w=10;
    optional Engine engine=11 [default=DEFAULT];
    optional bool global_pooling=12 [default=false];
}

message InnerProductParameter{
  optional uint32 num_output = 1;
  optional bool bias_term = 2 [default = true];
  optional FillerParameter weight_filler = 3;
  optional FillerParameter bias_filler = 4;
  optional int32 axis = 5 [default = 1];
}

message SoftmaxParameter {
  enum Engine {DEFAULT = 0;DRAGON = 1;CUDNN = 2;}
  optional Engine engine = 1 [default = DEFAULT];
  optional int32 axis = 2 [default = 1];
}

message LossParameter {
  optional int32 ignore_label = 1;
  optional bool normalize = 2 [default = true];
}

message AccuracyParameter {
  optional uint32 top_k = 1 [default = 1];
  optional int32 axis = 2 [default = 1];
  optional int32 ignore_label = 3;
}

message ReLUParameter{
    optional float negative_slope=1 [default=0];
    enum Engine{DEFAULT=0;DRAGON=1;CUDNN=2;}
    optional Engine engine=2 [default=DEFAULT];
}

message BatchNormParameter{
    optional bool use_global_stats=1 [default=true];
    optional float decay=3 [default=0.95];
    optional float eps=2 [default=1e-10];
}

message DropoutParameter {
  optional float prob = 1 [default = 0.5];
}

message LSTMParameter {
  optional uint32 num_output = 1; // The number of outputs for the layer
  optional float clipping_threshold = 2 [default = 0.0];
  optional FillerParameter weight_filler = 3; // The filler for weight
  optional FillerParameter bias_filler = 4; // The filler for the bias
  optional uint32 batch_size = 5 [default = 1];
}
